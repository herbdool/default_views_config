<?php
/**
 * @file
 * Default Views Convert to Config.
 */

/**
 * Implements hook_menu().
 */
function default_views_config_menu() {
  $items['admin/structure/views/default-views-convert'] = array(
    'title' => 'Convert Views',
    'description' => 'Convert Default Views to Config.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('default_views_config_form'),
    'access arguments' => array('access comments'),
  );

  return $items;
}

/**
 * Import a view from cut & paste.
 */
function default_views_config_form($form, &$form_state) {
  if (!empty($form_state['reloaded'])) {
    $form['default_converted_result'] = array(
      '#type' => 'textarea',
      '#title' => t('Click to copy. Save contents as %filename.json', array('%filename' => $form_state['config_name'])),
      '#default_value' => $form_state['reloaded'],
      '#attributes' => array('readonly' => 'readonly'),
      '#attached' => array(
        'js' => array(
          backdrop_get_path('module', 'default_views_config') . '/default_views_config.js',
        ),
      ),
    );
    $form['start_over'] = array(
      '#submit' => 'default_views_config_reload',
      '#type' => 'submit',
      '#value' => t('Start over'),
    );
  }
  else {
    $form['view'] = array(
      '#type' => 'textarea',
      '#title' => t('Paste view code here'),
      '#required' => TRUE,
      '#description' => t('Only one view can be imported at a time. Select the text in a Drupal hook_views_default_views() function from (and including) %start to (but excluding) %end.', array('%start' => '$view = new view;', '%end' => '$views[\'the_view_name\'] = $view;')),
    );
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('View name'),
      '#description' => t('Enter the name to use for this view if it is different from the source view. Leave blank to use the name of the view.'),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Convert'),
    );
  }
  return $form;
}

/**
 * Submit handler to reload the default_views_config_form().
 */
function default_views_config_reload($form, &$form_state) {
  backdrop_goto('default-views-convert');
}

/**
 * Validate handler to convert a view to config.
 */
function default_views_config_form_validate($form, &$form_state) {
  $form_state['reloaded'] = '';
  $view = '';

  // Be forgiving if someone pastes views code that starts with '<?php'.
  if (substr($form_state['values']['view'], 0, 5) == '<?php') {
    $form_state['values']['view'] = substr($form_state['values']['view'], 5);
  }
  ob_start();
  eval($form_state['values']['view']);
  ob_end_clean();

  if (!is_object($view)) {
    return form_error($form['view'], t('Unable to interpret view code.'));
  }

  if (empty($view->api_version) || $view->api_version < 2) {
    form_error($form['view'], t('That view is not compatible with this version of Views.'));
  }
  elseif (version_compare($view->api_version, views_api_version(), '>')) {
    form_error($form['view'], t('That view is created for the version @import_version of views, but you only have @api_version', array(
      '@import_version' => $view->api_version,
      '@api_version' => views_api_version())));
  }

  // View name must be alphanumeric or underscores, no other punctuation.
  if (!empty($form_state['values']['name']) && preg_match('/[^a-zA-Z0-9_]/', $form_state['values']['name'])) {
    form_error($form['name'], t('View name must be alphanumeric or underscores only.'));
  }

  if ($form_state['values']['name']) {
    $view->name = $form_state['values']['name'];
  }

  $test = views_get_view($view->name);
  if ($test && $test->type != t('Default')) {
    form_set_error('', t('A view by that name already exists; please choose a different name'));
  }

  // Make sure base table gets set properly if it got moved.
  $view->update();

  $view->init_display();

  $form_state['view'] = &$view;
}

/**
 * Submit handler to convert a view to config.
 */
function default_views_config_form_submit($form, &$form_state) {
  $view = $form_state['view'];
  $config_data = array(
    'name' => $view->name,
    'description' => $view->description,
  );
  // Storage settings are only saved if this view was provided by a module.
  // Otherwise VIEWS_STORAGE_NORMAL is assumed on load.
  if ($view->module) {
    $config_data['module'] = $view->module;
    $config_data['storage'] = VIEWS_STORAGE_OVERRIDE;
  }
  $config_data += array(
    'tag' => $view->tag,
    'disabled' => (boolean) $view->disabled,
    'base_table' => $view->base_table,
    'human_name' => $view->human_name,
    'core' => $view->core,
    'display' => array(),
  );
  foreach ($view->display as $display) {
    $display_config_data = array(
      'display_title' => $display->display_title,
      'display_plugin' => $display->display_plugin,
      'display_options' => $display->display_options,
    );
    $config_data['display'][$display->id] = $display_config_data;
  }
  // Ensure we don't include the lock information in the saved config.
  if (property_exists($view, 'locked')) {
    unset($view->locked);
  }
  $config_name = 'views.view.' . $view->name;
  $config_data = array_merge(array('_config_name' => $config_name), $config_data);
  $contents = backdrop_json_encode($config_data, TRUE);

  // Clear caches.
  views_invalidate_cache();
  if ($contents) {
    $form_state['config_name'] = $config_name;
    $form_state['reloaded'] = $contents;
    $form_state['rebuild'] = TRUE;
  }
}
